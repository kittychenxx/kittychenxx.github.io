<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Git安装 | 一些常见指令操作 | 连接到github</title>
    <url>/2020/04/02/git/</url>
    <content><![CDATA[<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><ul>
<li><code>git clone [url]</code>：下载库的链接，打开自己库就可以复制到bash</li>
<li><code>git remote set-url 对应的ssh链接</code></li>
</ul>
<h4 id="创建版本号"><a href="#创建版本号" class="headerlink" title="创建版本号"></a>创建版本号</h4><ul>
<li><code>mkdir kittychen</code>：创建一个空的目录</li>
<li><code>pwd</code>：显示当前目录</li>
<li><code>git init</code>：在切换到创建的空目录前提下，让目录变成Git可以管理的仓库</li>
<li><code>.git</code>目录是Git用来跟踪版本库的，如果没看到，用<code>ls -ah</code>可以看见</li>
</ul>
<h4 id="提交到Git库-一定要在一开始创建的目录下"><a href="#提交到Git库-一定要在一开始创建的目录下" class="headerlink" title="提交到Git库(一定要在一开始创建的目录下)"></a>提交到Git库(一定要在一开始创建的目录下)</h4><ul>
<li><code>git add</code>：把文件添加到缓冲区，等待提交</li>
<li><code>git commit -m &quot;xxx&quot;</code>：把文件提交到仓库，可以加上 <code>-m &quot;xxx&quot;</code> 输入本次提交的说明，<code>1 file changed</code>：1个文件被改动；<code>2 insertions</code>：插入了两行内容</li>
<li>为什么需要<code>add</code>，<code>commit</code>，因为可以一次提交多个<code>add</code>不同的文件</li>
</ul>
<h4 id="Git操作"><a href="#Git操作" class="headerlink" title="Git操作"></a>Git操作</h4><ul>
<li><code>git status</code>：查看工作区的工作状态</li>
<li><code>git diff</code>：如果<code>git status</code>显示修改过，则可以查看修改内容</li>
<li><code>git branch -a</code>：查看当前的分支情况</li>
<li><code>git checkout -b dev</code>：创建一个新的分支，dev代表development，开发分支</li>
<li><code>git checkout master</code>：切换到master分支下</li>
<li><code>git merge dev</code>：在要合并到的主分支（master）下操作，将dev合并到master</li>
<li><code>git reset HEAD</code>: 取消已经缓存的内容</li>
<li><code>git rm</code>: 手动删除文件</li>
<li><code>git push origin master</code>: 上传缓冲区的文件到远程仓库</li>
<li><code>git config --list</code>: 查看用户配置</li>
</ul>
<p><img src="/2020/04/02/git/1585211443090.png" alt></p>
<ul>
<li><p>当开发（dev）工作结束，需要删除分支时</p>
<p><code>git branch -D dev</code>：dev指你想要的删除的分支名，只在本地删除了分支，远程的库的分支还存在</p>
</li>
</ul>
<p><img src="/2020/04/02/git/1585211621161.png" alt></p>
<ul>
<li><p>如何删除本地的分支呢</p>
<p><code>git push origin :dev</code>：冒号前面留空是说明本地的dev为空了，传到远程的dev分支</p>
</li>
</ul>
<p><img src="/2020/04/02/git/1585211771370.png" alt></p>
<p><img src="/2020/04/02/git/1585211784188.png" alt></p>
<ul>
<li>想要退回到以前的版本：<code>git reset --hard head^</code></li>
<li>如果又想回到上上次的版本：<code>git log</code></li>
<li>查看日志：<code>git reflog</code></li>
</ul>
<p><img src="/2020/04/02/git/1585212204590.png" alt></p>
<ul>
<li>回退到你想要的任何时间的版本：<code>git reset --hard 代号</code>，代号是指你在日志查看了想要返回版本的对应的代码，对应黄色字体，或者写<code>HEAD{Num}</code></li>
</ul>
<p><img src="/2020/04/02/git/1585212318699.png" alt></p>
<h4 id="连接到远程的库操作"><a href="#连接到远程的库操作" class="headerlink" title="连接到远程的库操作"></a>连接到远程的库操作</h4><p>1 设置用户名和邮箱,方便每次提交到github</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git config --global user.name &quot;xxx&quot; &#x2F;&#x2F; xx -&gt; github的用户名</span><br><span class="line">git config --global user.email &quot;xxx@xx.com&quot; &#x2F;&#x2F; -&gt; github的私人邮箱&#x2F;公开邮箱(设置的是不是私人,如果是私人的,填github生成的那个,可以在 个人-&gt; Settings -&gt; email 可以看到</span><br></pre></td></tr></table></figure>

<p>2 查看有没有填写正确</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git config --list</span><br></pre></td></tr></table></figure>

<p>3 本地生成ssh公匙</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;xxx@xx.com&quot; &#x2F;&#x2F;与上面设置的一致就可以</span><br></pre></td></tr></table></figure>

<p>4 连接到github库</p>
<ul>
<li><p>先找到<code>ssh/id_rsa.pub</code>文件,<code>copy</code>下来</p>
</li>
<li><p><code>Settings</code>-&gt;<code>SSH keys</code>-&gt;<code>New SSH key</code>添加</p>
</li>
<li><p>使用命令<code>ssh -T git@github.com</code>,显示成功就可以进行提交到库的操作了</p>
</li>
<li><p>在自己的github上看看有没有提交成功</p>
</li>
</ul>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>小白捣腾博客hexo</title>
    <url>/2020/03/30/%E5%B0%8F%E7%99%BD%E6%8D%A3%E8%85%BE%E5%8D%9A%E5%AE%A2hexo/</url>
    <content><![CDATA[<h3 id="小白捣腾博客hexo"><a href="#小白捣腾博客hexo" class="headerlink" title="小白捣腾博客hexo"></a>小白捣腾博客hexo</h3><p>偶买噶，又在环境里整了半天</p>
<p>整了半天，总算有个博客了</p>
<p><code>hexo generate</code>：生成静态页面(简写为 hexo g)</p>
<p><code>hexo clean</code>：清除/public的文件</p>
<p><code>hexo server</code>：启动博客(简写为 hexo s)</p>
<p><code>hexo deploy</code>：将文件上传到github(简写为 hexo d)</p>
<p>我的主题是<code>ayer</code>，下载网址<a href="https://github.com/Shen-Yu/hexo-theme-ayer" target="_blank" rel="noopener">https://github.com/Shen-Yu/hexo-theme-ayer</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;在根目录下clone</span><br><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;Shen-Yu&#x2F;hexo-theme-ayer</span><br></pre></td></tr></table></figure>



<ol>
<li><p>换图片</p>
<p>下载下来的主题在<code>themes</code>，根目录下<code>_config.yml</code>设置，图片在同级目录的<code>source/images</code>下</p>
</li>
</ol>
<p><img src="/2020/03/30/%E5%B0%8F%E7%99%BD%E6%8D%A3%E8%85%BE%E5%8D%9A%E5%AE%A2hexo/1585553950335.png" alt></p>
<ol start="2">
<li>去掉作者的github链接(单纯觉得不好看)</li>
</ol>
<p><img src="/2020/03/30/%E5%B0%8F%E7%99%BD%E6%8D%A3%E8%85%BE%E5%8D%9A%E5%AE%A2hexo/1585554340463.png" alt></p>
<p>…一开始走了很多迷糊路，想去具体的ayer.ejs把对应的html给删除，但是这里容易出错，会显示<code>enable</code>这个变量不可读</p>
<p><img src="/2020/03/30/%E5%B0%8F%E7%99%BD%E6%8D%A3%E8%85%BE%E5%8D%9A%E5%AE%A2hexo/1585568931288.png" alt></p>
<p>强烈建议各位刚开始用hexo的小伙伴，专注看你下载的主题<code>themes</code>的配置文件<code>_config.yml</code>、<code>layout/_config.yml</code>。这两个文件认真看，可以节省很多时间，还有不懂的地方可以结合<a href="https://hexo.io/" target="_blank" rel="noopener">hexo官方文档</a>。</p>
<p>下面就是开始往你的博客放东西啦，这里我也走了不少弯路。。。</p>
<p>不过如果你想自己来写一个，参考一下别人的代码也是不错的</p>
<p>分享一篇适合小白的教程，<a href="https://lovenight.github.io/" target="_blank" rel="noopener">Hexo 3.1.1 静态博客搭建指南</a></p>
<p>关于报错</p>
<ol>
<li><p>出现<code>FATAL bad indentation of a mapping entry at line 113, column 9，type: atom</code></p>
<p>原因：<code>clone</code>了插件之后，配置<code>config.yml</code>（是工程根目录下的）时候要把<code>feed：</code>后的<code>m</code>去掉</p>
<p><img src="/2020/03/30/%E5%B0%8F%E7%99%BD%E6%8D%A3%E8%85%BE%E5%8D%9A%E5%AE%A2hexo/1585577608562.png" alt></p>
</li>
</ol>
<p>这里<code>clone</code>的是<code>hexo-generate-feed</code>插件，可以帮助生成<code>xml</code>文件，读取帖子的所有内容，否则只摘要帖子的前140个字符</p>
<ol start="2">
<li><p><code>md</code>文档的图片加载不出来</p>
<p>原因：<code>hexo</code>默认无法处理文章中插入的图片，需要安装插件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-asset-image --sav</span><br></pre></td></tr></table></figure>

<p>-首先修改配置<code>_config.yml</code></p>
<p><img src="/2020/03/30/%E5%B0%8F%E7%99%BD%E6%8D%A3%E8%85%BE%E5%8D%9A%E5%AE%A2hexo/1585585228795.png" alt></p>
<p>启动资源文件夹，当资源文件管理功能打开后，Hexo将会在你每一次通过 <code>hexo new [layout] &lt;title&gt;</code> 命令创建新文章时自动创建一个文件夹。这个资源文件夹将会有与这个文章文件一样的名字。将所有与你的文章有关的资源放在这个关联文件夹中之后，你可以通过相对路径来引用它们，这样你就得到了一个更简单而且方便得多的工作流。</p>
</li>
</ol>
<p>   -使用命令</p>
   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo n xxxx &#x2F;&#x2F;会生成一个xxxx.md和xxxx的文件夹，把需要的图片放入xxxx文件夹就可以了，因为理解错误，卡了挺久，这里的xxxx是指你要放照片的文档的名字</span><br></pre></td></tr></table></figure>

<p>   在<code>markdown</code>，引用的话直接<code>![](ssss.jpg)</code>，这里对应是你图片的名字</p>
<p>   <img src="/2020/03/30/%E5%B0%8F%E7%99%BD%E6%8D%A3%E8%85%BE%E5%8D%9A%E5%AE%A2hexo/1585586331665.png" alt></p>
<p>我试过换hexo-asset-image包的版本的方法，不适应</p>
<p>果然还是那句话，官方文档](<a href="https://hexo.io/zh-cn/docs/asset-folders" target="_blank" rel="noopener">https://hexo.io/zh-cn/docs/asset-folders</a>) 比什么都好使。</p>
<p>终于安置好了。</p>
]]></content>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>博客之路开始了</title>
    <url>/2020/03/29/%E5%8D%9A%E5%AE%A2%E4%B9%8B%E8%B7%AF%E5%BC%80%E5%A7%8B%E4%BA%86/</url>
    <content><![CDATA[<p>很开始能来到hexo，拥有属于自己的一个博客！</p>
]]></content>
      <tags>
        <tag>心情</tag>
      </tags>
  </entry>
</search>
